---
- block:
    - name: Login to oVirt
      ovirt_auth:
        url: "{{ engine_url | default(lookup('env','OVIRT_URL')) | default(omit) }}"
        hostname: "{{ engine_fqdn | default(lookup('env','OVIRT_HOSTNAME')) | default(omit) }}"
        username: "{{ engine_user | default(lookup('env','OVIRT_USERNAME')) | default(omit) }}"
        password: "{{ engine_password | default(lookup('env','OVIRT_PASSWORD')) | default(omit) }}"
        ca_file: "{{ engine_cafile | default(lookup('env','OVIRT_CAFILE')) | default(omit) }}"
        insecure: "{{ engine_insecure | default(true) }}"
      when: ovirt_auth is undefined or not ovirt_auth
      register: loggedin
      tags:
        - always

    - name: Fetch the datacenter name
      ovirt_datacenter_info:
        auth: "{{ ovirt_auth }}"
        pattern: "Clusters.name = {{ template_cluster }}"
      register: dc_info

    - name: Fetch storages
      ovirt_storage_domain_info:
        auth: "{{ ovirt_auth }}"
        pattern: "datacenter={{ dc_info.ovirt_datacenters[0].name }}"
      register: sd_info
      when: template_disk_storage is undefined
      tags:
        - ovirt-template-image

    - name: Find data domain
      set_fact:
        disk_storage_domain: "{{ sd_info.ovirt_storage_domains|json_query(the_query)|list|first }}"
      when: template_disk_storage is undefined
      vars:
        the_query: "[?type=='data']"
      tags:
        - ovirt-template-image

    - name: Check if template already exists
      ovirt_template_info:
        auth: "{{ ovirt_auth }}"
        pattern: "name={{ template_name }} and datacenter={{ dc_info.ovirt_datacenters[0].name }}"
      register: template_info
      tags:
        - ovirt-template-image

    - block:
      - name: Deploy the qcow image to oVirt engine
        ovirt_disk:
          auth: "{{ ovirt_auth }}"
          name: "{{ template_disk_name | default(template_name) }}"
          size: "{{ qcow2_size }}"
          format: "{{ template_disk_format | default(omit) }}"
          image_path: "{{ downloaded_file.dest }}"
          storage_domain: "{{ template_disk_storage | default(disk_storage_domain.name) }}"
          force: "{{ template_info.ovirt_templates | length == 0 }}"
        register: ovirt_disk
        when: template_info.ovirt_templates | length == 0
        tags:
          - ovirt-template-image

      - name: Wait until the qcow image is unlocked by the oVirt engine
        ovirt_disk_info:
          auth: "{{ ovirt_auth }}"
          pattern: "id={{ ovirt_disk.id }}"
        register: disk_info
        until: ((ovirt_disk is defined) and (ovirt_disk.disk.status != "locked")) or ((disk_info is defined) and (disk_info.ovirt_disks[0].status != "locked"))
        retries: 20
        delay: 3
        when: template_info.ovirt_templates | length == 0
        tags:
          - ovirt-template-image
      when: qcow2_size is defined

    - block:
      - name: Generate SSH keys
        command: "ssh-keygen -t rsa -f {{ tmp_private_key_file }} -N ''"
        args:
          creates: "{{ tmp_private_key_file }}"
        when: template_prerequisites_tasks is defined
        delegate_to: localhost

      - name: Create vm qcow
        ovirt_vm:
          auth: "{{ ovirt_auth }}"
          name: "{{ vm_name }}"
          state: "{{ 'running' if template_prerequisites_tasks is defined else 'stopped' }}"
          cluster: "{{ template_cluster }}"
          io_threads: "{{ template_io_threads | default(omit) }}"
          memory: "{{ template_memory | default(omit) }}"
          memory_guaranteed: "{{ template_memory_guaranteed | default(omit) }}"
          memory_max: "{{ template_memory_max | default(omit) }}"
          cpu_cores: "{{ template_cpu }}"
          operating_system: "{{ template_operating_system }}"
          type: "{{ template_type | default(omit) }}"
          cloud_init: "{{ {'user_name': 'root', 'authorized_ssh_keys': lookup('file', tmp_private_key_file~'.pub') } if template_prerequisites_tasks is defined else omit }}"
          disks:
            - id: "{{ disk_info.ovirt_disks[0].id }}"
              bootable: true
              interface: "{{ template_disk_interface }}"
          nics: "{{ template_nics }}"
        when: qcow2_size is defined

      - name: Create vm external
        ovirt_vm:
          auth: "{{ ovirt_auth }}"
          name: "{{ vm_name }}"
          state: "{{ 'running' if template_prerequisites_tasks is defined else 'stopped' }}"
          cluster: "{{ template_cluster }}"
          io_threads: "{{ template_io_threads | default(omit) }}"
          memory: "{{ template_memory | default(omit) }}"
          memory_guaranteed: "{{ template_memory_guaranteed | default(omit) }}"
          memory_max: "{{ template_memory_max | default(omit) }}"
          cpu_cores: "{{ template_cpu }}"
          operating_system: "{{ template_operating_system }}"
          type: "{{ template_type | default(omit) }}"
          cloud_init: "{{ {'user_name': 'root', 'authorized_ssh_keys': lookup('file', tmp_private_key_file~'.pub') } if template_prerequisites_tasks is defined else omit }}"
          nics: "{{ template_nics }}"
          host: "{{ host_import | default(omit) }}"
          kvm: "{{ kvm_import | default(omit) }}"
          xen: "{{ xen_import | default(omit) }}"
          vmware: "{{ vmware_import | default(omit) }}"
        when: qcow2_size is undefined

      - name: Manage disks
        ovirt_disk:
          auth: "{{ ovirt_auth }}"
          name: "{{ item.name | default(omit) }}"
          size: "{{ item.size | default(omit) }}"
          interface: "{{ item.interface | default(template_disk_interface) | default(omit) }}"
          vm_name: "{{ vm_name }}"
          format: "{{ item.format | default(template_disk_format) | default(omit) }}"
          storage_domain: "{{ item.storage_domain | default(template_disk_storage) | default(omit) }}"
          bootable: "{{ item.bootable | default(omit) }}"
          wait: true
        loop: "{{ template_disks }}"

      - block:
        - name: Wait for VMs IPv4
          ovirt_vm_info:
            auth: "{{ ovirt_auth }}"
            pattern: "name={{ vm_name }}"
            fetch_nested: true
            nested_attributes: ips
          register: vm_info
          until: "vm_info.ovirt_vms | @NAMESPACE@.@NAME@.ovirtvmipv4 | length > 0"
          retries: 10
          delay: 5

        - name: Set Ip of the VM
          set_fact:
            vm_ip: "{{ vm_info.ovirt_vms | @NAMESPACE@.@NAME@.ovirtvmipv4 }}"

        - name: Include prerequisites tasks for VM
          import_tasks: "{{ template_prerequisites_tasks if template_prerequisites_tasks is defined else 'empty.yml' }}"
          static: no
          delegate_to: "{{ vm_ip }}"
          vars:
            ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
            ansible_user: root
            ansible_ssh_private_key_file: "{{ tmp_private_key_file | default(omit) }}"

        - name: Remove SSH keys
          file:
            state: absent
            path: "{{ item }}"
          delegate_to: localhost
          with_items:
            - "{{ tmp_private_key_file }}"
            - "{{ tmp_private_key_file }}.pub"

        - name: Stop vm
          ovirt_vm:
            auth: "{{ ovirt_auth }}"
            name: "{{ vm_name }}"
            state: stopped

        when: template_prerequisites_tasks is defined

      when: template_info.ovirt_templates | length == 0

    - block:
        - name: Resize disk if smaller than template_disk_size
          ovirt_disk:
            id: "{{ disk_info.ovirt_disks[0].id }}"
            vm_name: "{{ vm_name }}"
            auth: "{{ ovirt_auth }}"
            size: "{{ template_disk_size }}"

        - name: Wait for resize
          ovirt_disk:
            id: "{{ disk_info.ovirt_disks[0].id }}"
            auth: "{{ ovirt_auth }}"
          register: resized_disk
          until: resized_disk.disk.provisioned_size != disk_info.ovirt_disks[0].provisioned_size
          retries: "{{ (disk_resize_timeout / 3) | int }}"
          delay: 3
      when:
        - qcow2_size is defined
        - (template_disk_size | regex_replace('GiB') | int) > (qcow2_size | regex_replace('GiB') | int)
        - template_info.ovirt_templates | length == 0

    - name: Create template
      ovirt_template:
        auth: "{{ ovirt_auth }}"
        name: "{{ template_name }}"
        vm: "{{ vm_name }}"
        cluster: "{{ template_cluster }}"
        timeout: "{{ template_timeout }}"
        seal: "{{ template_seal }}"
      when: template_info.ovirt_templates | length == 0
      tags:
        - ovirt-template-image

  always:
    - name: Remove downloaded image
      file:
        path: "{{ downloaded_file.dest }}"
        state: absent
      when: not image_cache_download

    - name: Remove vm
      ovirt_vm:
        auth: "{{ ovirt_auth }}"
        state: absent
        name: "{{ vm_name }}"
      when: template_info.ovirt_templates | length == 0
      tags:
        - ovirt-template-image

    - name: Logout from oVirt
      ovirt_auth:
        state: absent
        ovirt_auth: "{{ ovirt_auth }}"
      when: not loggedin.skipped | default(false)
      tags:
        - always
